// --- CODE ---
// language: python
import random
from typing import List, Optional


def only_big_numbers(my_list: List[int], threshold: Optional[int] = None) -> List[Optional[int]]:
// --- SIMPLIFY THIS ---
    if threshold is None:
        threshold = random.randint(0, 100)
    big_numbers = []
    for i in range(0, len(my_list)):
        if my_list[i] > threshold:
            big_numbers.append(my_list[i])
    return big_numbers
// --- /SIMPLIFY THIS ---


if __name__ == '__main__':
    print(only_big_numbers([1, 5, 11, 20, 30, 35], 10))
// --- /CODE ---
// --- SIMPLIFIED ---
    threshold = threshold or random.randint(0, 100)
    return [x for x in my_list if x > threshold]
// --- /SIMPLIFIED ---


// --- CODE ---
// language: python
// --- SIMPLIFY THIS ---
words = ['apple', 'banana', 'apricot', 'cherry']

longest_a_word = None
for word in words:
    if word.startswith('a') and (longest_a_word is None or len(word) > len(longest_a_word)):
        longest_a_word = word
// --- /SIMPLIFY THIS ---
print(f"longest a word among {words} is {longest_a_word}")
// --- /CODE ---
// --- SIMPLIFIED ---
words = ['apple', 'banana', 'apricot', 'cherry']

longest_a_word = max((word for word in words if word.startswith('a')), key=len, default=None)
// --- /SIMPLIFIED ---


// --- CODE ---
// language: python
from typing import List, Tuple


class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age


class People:
    def __init__(self, people: List[Tuple[str, int]]):
// --- SIMPLIFY THIS ---
        self.people: List[Person] = []
        for p in people:
            name = p[0]
            age = p[1]
            person = Person(name, age)
            self.people.append(person)
// --- /SIMPLIFY THIS ---

    def __repr__(self):
        return f"people: {self.people}"


if __name__ == '__main__':
    people = People([('John', 30), ('Jane', 29), ('Bob', 35)])
    print(people)
// --- /CODE ---
// --- SIMPLIFIED ---
        self.people: List[Person] = [Person(name, age) for name, age in people]
// --- /SIMPLIFIED ---


// --- CODE ---
// language: javascript
// --- SIMPLIFY THIS ---
let numbers = [1, 2, 3, 4, 5];
let filteredNumbers = [];
for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] % 2 === 0) {
        filteredNumbers.push(numbers[i]);
    }
}
// --- /SIMPLIFY THIS ---
// --- /CODE ---
// --- SIMPLIFIED ---
let numbers = [1, 2, 3, 4, 5];
let filteredNumbers = numbers.filter(num => num % 2 === 0);
// --- /SIMPLIFIED ---


// --- CODE ---
// language: python
import time


// --- SIMPLIFY THIS ---
def slow_function(n):
    time.sleep(5)
    return n ** 2


def cached_function(n, cache={}):
    if n in cache:
        return cache[n]
    else:
        result = slow_function(n)
        cache[n] = result
        return result


// --- /SIMPLIFY THIS ---
// --- /CODE ---
// --- SIMPLIFIED ---
@lru_cache(maxsize=None)
def slow_function(n):
    time.sleep(5)
    return n ** 2


def cached_function(n):
    return slow_function(n)


if __name__ == '__main__':
    print(cached_function(1))
    print(cached_function(2))
    print(cached_function(1))
// --- /SIMPLIFIED ---


// --- CODE ---
{___place_code_here___}
// --- /CODE ---
// --- SIMPLIFIED ---